/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import effects.LetterTransition;
import entities.FadeComponent;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import static java.lang.Thread.sleep;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.Timer;
import view.components.Letter;

/**
 *
 * @author shanks
 */
public class LowerCaseLetterAnimation extends javax.swing.JPanel {

    private boolean isPlaying;
    private boolean isMute;
    private LetterTransition letterTransition;
    private Letter letter;
    private FadeComponent fadeComponent;

    /**
     * Creates new form LowerCaseLetterAnimation
     */
    public LowerCaseLetterAnimation() {
        initComponents();
        letterTransition = new LetterTransition();
        isPlaying = false;
        isMute = false;
        letter = null;
        fadeComponent = new FadeComponent(new Dimension(900, 600));
        fadeComponent.setBounds(0, 0, 900, 600);
        this.setOpaque(false);
        this.add(fadeComponent);
    }//fim construtor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanel = new javax.swing.JPanel();
        play_pauseButton = new javax.swing.JButton();
        replayButton = new javax.swing.JButton();
        mute = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(900, 600));
        setMinimumSize(new java.awt.Dimension(900, 600));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(900, 600));
        setLayout(null);

        controlPanel.setBackground(new java.awt.Color(255, 0, 0));
        controlPanel.setOpaque(false);
        controlPanel.setLayout(new java.awt.GridLayout(1, 0));
        controlPanel.setVisible(false);

        play_pauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/play.png"))); // NOI18N
        play_pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                play_pauseButtonActionPerformed(evt);
            }
        });
        controlPanel.add(play_pauseButton);

        replayButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/replay.png"))); // NOI18N
        replayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replayButtonActionPerformed(evt);
            }
        });
        controlPanel.add(replayButton);

        mute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/audio.png"))); // NOI18N
        mute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                muteActionPerformed(evt);
            }
        });
        controlPanel.add(mute);

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/close.png"))); // NOI18N
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        controlPanel.add(closeButton);

        add(controlPanel);
        controlPanel.setBounds(325, 482, 255, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void play_pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_play_pauseButtonActionPerformed

        play();
    }//GEN-LAST:event_play_pauseButtonActionPerformed

    private void replayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replayButtonActionPerformed
        replay();
    }//GEN-LAST:event_replayButtonActionPerformed

    private void muteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_muteActionPerformed
        mute();
    }//GEN-LAST:event_muteActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        close();
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * Método que executa o audio de uma animação
     */
    public void play() {
        if (isPlaying) {//pausa a animação
            URL iconPath = getClass().getResource(File.separator + "icons" + File.separator + "play.png");
            play_pauseButton.setIcon(new ImageIcon(iconPath));
            letterTransition.pause();
        } else {//retorna a animação
            URL iconPath = getClass().getResource(File.separator + "icons" + File.separator + "pause.png");
            play_pauseButton.setIcon(new ImageIcon(iconPath));
            if (letterTransition.isAlive()) {
                letterTransition.play();

            } else if (letter != null) {
                letterTransition = new LetterTransition(letter, this.getSize(), LetterTransition.LOWER_CASE);
                letterTransition.start();
            }
        }//fim if-else
        isPlaying = !isPlaying;
    }//fim play

    /**
     * Método que reexecuta uma animação
     */
    public void replay() {
        URL iconPath = getClass().getResource(File.separator + "icons" + File.separator + "pause.png");
        play_pauseButton.setIcon(new ImageIcon(iconPath));
        isPlaying = true;
        letterTransition = letterTransition.replay();
    }//fim replay

    /**
     * Método que silencia um audio de uma animação
     */
    public void mute() {
        if (isMute) {//habilita o audio
            URL iconPath = getClass().getResource(File.separator + "icons" + File.separator + "audio.png");
            mute.setIcon(new ImageIcon(iconPath));
            letterTransition.enableAudio();

        } else {//desabilita o audio
            URL iconPath = getClass().getResource(File.separator + "icons" + File.separator + "mute.png");
            mute.setIcon(new ImageIcon(iconPath));
            letterTransition.disableAudio();
        }
        isMute = !isMute;
    }//fim mute

    /**
     * Método que encerra uma animação
     */
    public void close() {
        letterTransition.close();
        isPlaying = false;
        this.setVisible(false);
    }//fim close

    /**
     * Método que seta uma letra para a animação da classe
     *
     * @param letter Letter
     */
    public void setLetter(Letter letter) {
        this.letter = letter;
    }//fim setLetter

    @Override
    public void setVisible(boolean visibility) {
        Timer t = new Timer((visibility) ? 500 : 2500, (ActionEvent e) -> {
            super.setVisible(visibility);
        });
        t.setRepeats(false);
        t.start();

        LetterTransition.fade(fadeComponent, 0.7f, visibility);

        Timer t1 = new Timer((visibility) ? 500 : 1800, (ActionEvent e) -> {
            controlPanel.setVisible(visibility);
        });
        t1.setRepeats(false);
        t1.start();

        if (visibility) {
            Timer t2 = new Timer(1500, (ActionEvent e) -> {
                play_pauseButton.doClick();
            });
            t2.setRepeats(false);
            t2.start();
        }
    }//fim setVisible


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JButton mute;
    private javax.swing.JButton play_pauseButton;
    private javax.swing.JButton replayButton;
    // End of variables declaration//GEN-END:variables
}//fim class
